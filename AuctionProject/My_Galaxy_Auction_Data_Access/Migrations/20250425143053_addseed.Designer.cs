// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using My_Galaxy_Auction_Data_Access.Context;

#nullable disable

namespace My_Galaxy_Auction_Data_Access.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250425143053_addseed")]
    partial class addseed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("My_Galaxy_Auction_Data_Access.Domain.Bid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"));

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BidStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("BidId");

                    b.HasIndex("UserId1");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("My_Galaxy_Auction_Data_Access.Domain.PaymentHistory", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleId1")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId1");

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("My_Galaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AuctionPrice")
                        .HasColumnType("float");

                    b.Property<string>("BrandAndModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EngineCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<int>("Milage")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("VehicleId");

                    b.HasIndex("SellerId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            AdditionalInformation = "Well maintained, single owner",
                            AuctionPrice = 140000.0,
                            BrandAndModel = "Toyota Corolla",
                            Color = "White",
                            EndTime = new DateTime(2025, 6, 9, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3047),
                            EngineCapacity = 1.6m,
                            Image = "toyota-corolla.jpg",
                            IsActive = true,
                            ManufacturingYear = 2019,
                            Milage = 60000,
                            PlateNumber = "34ABC123",
                            Price = 150000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 993, DateTimeKind.Local).AddTicks(1742)
                        },
                        new
                        {
                            VehicleId = 2,
                            AdditionalInformation = "Luxury package, leather seats",
                            AuctionPrice = 300000.0,
                            BrandAndModel = "BMW 320i",
                            Color = "Black",
                            EndTime = new DateTime(2025, 7, 26, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3833),
                            EngineCapacity = 2.0m,
                            Image = "bmw-320i.jpg",
                            IsActive = true,
                            ManufacturingYear = 2017,
                            Milage = 85000,
                            PlateNumber = "06DEF456",
                            Price = 320000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3831)
                        },
                        new
                        {
                            VehicleId = 3,
                            AdditionalInformation = "Accident-free, new tires",
                            AuctionPrice = 200000.0,
                            BrandAndModel = "Honda Civic",
                            Color = "Red",
                            EndTime = new DateTime(2025, 7, 10, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3839),
                            EngineCapacity = 1.5m,
                            Image = "honda-civic.jpg",
                            IsActive = true,
                            ManufacturingYear = 2020,
                            Milage = 40000,
                            PlateNumber = "35GHI789",
                            Price = 210000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3839)
                        },
                        new
                        {
                            VehicleId = 4,
                            AdditionalInformation = "AMG design, panoramic roof",
                            AuctionPrice = 385000.0,
                            BrandAndModel = "Mercedes C200",
                            Color = "Silver",
                            EndTime = new DateTime(2025, 8, 3, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3842),
                            EngineCapacity = 1.8m,
                            Image = "mercedes-c200.jpg",
                            IsActive = true,
                            ManufacturingYear = 2018,
                            Milage = 70000,
                            PlateNumber = "34JKL321",
                            Price = 400000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3842)
                        },
                        new
                        {
                            VehicleId = 5,
                            AdditionalInformation = "New brakes and battery",
                            AuctionPrice = 125000.0,
                            BrandAndModel = "Ford Focus",
                            Color = "Blue",
                            EndTime = new DateTime(2025, 6, 29, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3848),
                            EngineCapacity = 1.6m,
                            Image = "ford-focus.jpg",
                            IsActive = true,
                            ManufacturingYear = 2016,
                            Milage = 95000,
                            PlateNumber = "16MNO654",
                            Price = 130000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3848)
                        },
                        new
                        {
                            VehicleId = 6,
                            AdditionalInformation = "S-tronic, low fuel consumption",
                            AuctionPrice = 340000.0,
                            BrandAndModel = "Audi A3",
                            Color = "Grey",
                            EndTime = new DateTime(2025, 7, 4, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3851),
                            EngineCapacity = 1.4m,
                            Image = "audi-a3.jpg",
                            IsActive = true,
                            ManufacturingYear = 2019,
                            Milage = 50000,
                            PlateNumber = "34PQR789",
                            Price = 350000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3851)
                        },
                        new
                        {
                            VehicleId = 7,
                            AdditionalInformation = "Economic and reliable",
                            AuctionPrice = 100000.0,
                            BrandAndModel = "Volkswagen Golf",
                            Color = "Green",
                            EndTime = new DateTime(2025, 6, 20, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3877),
                            EngineCapacity = 1.2m,
                            Image = "vw-golf.jpg",
                            IsActive = true,
                            ManufacturingYear = 2015,
                            Milage = 105000,
                            PlateNumber = "41STU101",
                            Price = 110000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3876)
                        },
                        new
                        {
                            VehicleId = 8,
                            AdditionalInformation = "SUV, high ground clearance",
                            AuctionPrice = 360000.0,
                            BrandAndModel = "Peugeot 3008",
                            Color = "Brown",
                            EndTime = new DateTime(2025, 7, 18, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3880),
                            EngineCapacity = 1.5m,
                            Image = "peugeot-3008.jpg",
                            IsActive = true,
                            ManufacturingYear = 2021,
                            Milage = 30000,
                            PlateNumber = "35UVW202",
                            Price = 370000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3880)
                        },
                        new
                        {
                            VehicleId = 9,
                            AdditionalInformation = "Factory warranty continues",
                            AuctionPrice = 250000.0,
                            BrandAndModel = "Hyundai Elantra",
                            Color = "White",
                            EndTime = new DateTime(2025, 6, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3883),
                            EngineCapacity = 1.6m,
                            Image = "hyundai-elantra.jpg",
                            IsActive = true,
                            ManufacturingYear = 2022,
                            Milage = 20000,
                            PlateNumber = "06XYZ303",
                            Price = 260000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3882)
                        },
                        new
                        {
                            VehicleId = 10,
                            AdditionalInformation = "Needs minor maintenance",
                            AuctionPrice = 90000.0,
                            BrandAndModel = "Opel Astra",
                            Color = "Dark Blue",
                            EndTime = new DateTime(2025, 6, 4, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3886),
                            EngineCapacity = 1.6m,
                            Image = "opel-astra.jpg",
                            IsActive = true,
                            ManufacturingYear = 2014,
                            Milage = 120000,
                            PlateNumber = "34AAA001",
                            Price = 95000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3885)
                        },
                        new
                        {
                            VehicleId = 11,
                            AdditionalInformation = "Family car, comfortable ride",
                            AuctionPrice = 115000.0,
                            BrandAndModel = "Renault Megane",
                            Color = "Silver",
                            EndTime = new DateTime(2025, 7, 2, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3889),
                            EngineCapacity = 1.5m,
                            Image = "renault-megane.jpg",
                            IsActive = true,
                            ManufacturingYear = 2016,
                            Milage = 90000,
                            PlateNumber = "34BBB002",
                            Price = 125000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3888)
                        },
                        new
                        {
                            VehicleId = 12,
                            AdditionalInformation = "Stylish and fun to drive",
                            AuctionPrice = 185000.0,
                            BrandAndModel = "Mazda 3",
                            Color = "Red",
                            EndTime = new DateTime(2025, 6, 23, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3891),
                            EngineCapacity = 1.5m,
                            Image = "mazda-3.jpg",
                            IsActive = true,
                            ManufacturingYear = 2018,
                            Milage = 75000,
                            PlateNumber = "34CCC003",
                            Price = 195000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3891)
                        },
                        new
                        {
                            VehicleId = 13,
                            AdditionalInformation = "High-tech features included",
                            AuctionPrice = 370000.0,
                            BrandAndModel = "Nissan Qashqai",
                            Color = "Grey",
                            EndTime = new DateTime(2025, 7, 31, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3894),
                            EngineCapacity = 1.3m,
                            Image = "nissan-qashqai.jpg",
                            IsActive = true,
                            ManufacturingYear = 2021,
                            Milage = 25000,
                            PlateNumber = "34DDD004",
                            Price = 390000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3894)
                        },
                        new
                        {
                            VehicleId = 14,
                            AdditionalInformation = "Sporty hatchback, agile drive",
                            AuctionPrice = 135000.0,
                            BrandAndModel = "Seat Leon",
                            Color = "Blue",
                            EndTime = new DateTime(2025, 6, 11, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3898),
                            EngineCapacity = 1.4m,
                            Image = "seat-leon.jpg",
                            IsActive = true,
                            ManufacturingYear = 2017,
                            Milage = 88000,
                            PlateNumber = "34EEE005",
                            Price = 145000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3898)
                        },
                        new
                        {
                            VehicleId = 15,
                            AdditionalInformation = "Spacious and efficient",
                            AuctionPrice = 110000.0,
                            BrandAndModel = "Skoda Octavia",
                            Color = "White",
                            EndTime = new DateTime(2025, 6, 17, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3901),
                            EngineCapacity = 1.6m,
                            Image = "skoda-octavia.jpg",
                            IsActive = true,
                            ManufacturingYear = 2015,
                            Milage = 98000,
                            PlateNumber = "34FFF006",
                            Price = 118000m,
                            SellerId = "55623a4b-7e63-42c7-baa2-7d34ef4ea27b",
                            StartTime = new DateTime(2025, 4, 25, 17, 30, 52, 994, DateTimeKind.Local).AddTicks(3900)
                        });
                });

            modelBuilder.Entity("My_Galaxy_Auction_Data_Access.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("My_Galaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("My_Galaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Galaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("My_Galaxy_Auction_Data_Access.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("My_Galaxy_Auction_Data_Access.Domain.Bid", b =>
                {
                    b.HasOne("My_Galaxy_Auction_Data_Access.Models.ApplicationUser", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId1");

                    b.HasOne("My_Galaxy_Auction_Data_Access.Domain.Vehicle", "Vehicle")
                        .WithMany("Bids")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("My_Galaxy_Auction_Data_Access.Domain.PaymentHistory", b =>
                {
                    b.HasOne("My_Galaxy_Auction_Data_Access.Models.ApplicationUser", "User")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("UserId");

                    b.HasOne("My_Galaxy_Auction_Data_Access.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId1");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("My_Galaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.HasOne("My_Galaxy_Auction_Data_Access.Models.ApplicationUser", "Seller")
                        .WithMany("Vehicles")
                        .HasForeignKey("SellerId");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("My_Galaxy_Auction_Data_Access.Domain.Vehicle", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("My_Galaxy_Auction_Data_Access.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("PaymentHistories");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
